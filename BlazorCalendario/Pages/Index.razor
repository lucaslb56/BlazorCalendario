@page "/"
@using BlazorCalendario.Data

<link rel="stylesheet" href="css/index.css">

<PageTitle>Index</PageTitle>

<h1>Agendamentos</h1>

@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Novo evento</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Data inicial: </label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" style="width:100%;" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Data final: </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" style="width:100%;"/>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <label>Assunto: </label>
                    </div>
                    <div class="col-md-8">
                        <input type="text" style="width:100%;" placeholder="Assunto..." />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <label>Local: </label>
                    </div>
                    <div class="col-md-8">
                        <input type="text" style="width:100%;" placeholder="Local..." />
                    </div>
                </div>


                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6" style="text-align:right;">
                        <button class="btn btn-success" style="float: left; margin-right:5px;">Salvar</button>
                        <button class="btn btn-danger" @onclick="CloseModal" style="float:left;">Fechar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var InomeDiaSemana = 0; InomeDiaSemana < diasSemana.Count(); InomeDiaSemana++)
            {
                <th>
                    @diasSemana[InomeDiaSemana]
                </th>
            }
        </tr>
    </thead>

    <tbody>
        @for (var ISemana = 0; ISemana < calendario.Count(); ISemana++)
        {
            var dias = calendario[ISemana].Dates;
            var IDia = 0;
            <tr>
                @for (var IdiaSemana = 0; IdiaSemana < 7; IdiaSemana++)
                {
                    if (ISemana == calendario.Count()-1 && IDia > dias.Count()){
                        break;
                    }
                    var sIndice = ISemana;
                    var dIndice = ISemana;
                    var nomeDia = dias[IDia].NomeDia;

                    <td @onclick="@(()=>OpenModal(sIndice, dIndice))">
                        @if (diasSemana[IdiaSemana] == nomeDia){
                        @dias[IDia].ValorData;
                        <br /><br />

                        <label>@dias[IDia].Nota.ToUpper()</label>
                        <br /><br />
                        IDia++;
                        }
                        <!--Número do celular : [@indiceSemana, @indiceDia]  -->
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {

    Calendar calendar = new Calendar();
    List<Semana> calendario;
    List<string> diasSemana;
    bool displayModal = false;
    List<string> nomeMeses = new List<string>();
    
    List<string> dias = new List<string>();
    List<Semana> semana = new List<Semana>();
    DateTime dataIncio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    DateTime dataFinal = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);


    protected override void OnInitialized()
    {   
        dataIncio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        dataFinal = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

        calendar.setCalendar(dataIncio, dataFinal);
        diasSemana = calendar.diasSemana;
        calendario = calendar.calendar;
        // Crie a lista original de meses
        nomeMeses = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        
        // Obtenha o mês atual
        int mesAtual = DateTime.Now.Month;
        
        // Ajuste a lista de meses
        List<string> mesesAjustados = new List<string>();
        for (int i = 1; i < mesAtual; i++)
        {
            mesesAjustados.Add(nomeMeses[i - 1]);
        }
        mesesAjustados.Add(nomeMeses[mesAtual - 1]);
        for (int i = mesAtual + 1; i <= 12; i++)
        {
            mesesAjustados.Add(nomeMeses[i - 1]);
        }
        nomeMeses = mesesAjustados;

        CriarCabecalhoCalendario();
        CriarCorpoCalendario();
    }

    private void CarregarCalendario(ChangeEventArgs e)
    {
        var mes = e.Value.ToString();

        // Filter out null values before parsing:
        if (string.IsNullOrEmpty(mes))
        {
            // Handle null value case (e.g., display error message)
            return;
        }

        int indiceMes = DateTime.ParseExact(mes, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")).Month;
        dataIncio = new DateTime(DateTime.Now.Year, indiceMes, 1);
        dataFinal = (new DateTime(DateTime.Now.Year, indiceMes, 1)).AddMonths(1).AddDays(-1);
        
        CriarCabecalhoCalendario();
        CriarCorpoCalendario();
    }

    private void CriarCabecalhoCalendario()
    {
        var dia = new List<string>();

        for (var percorre = dataIncio; percorre <= dataFinal; percorre = percorre.AddDays(1))
        {
            dia.Add(percorre.ToString("dddd"));
        }
        dias = dia.Distinct().ToList();
    }

    private void CriarCorpoCalendario()
    {
        semana = new List<Semana>();

        int flag = 0;
        Semana semanaClsse = new Semana();

        List<EventoDia> eventos = new List<EventoDia>();
        var totalDias = (int)(dataFinal - dataIncio).TotalDays;
        int contarDias = 0;

        for (var data = dataIncio; data <= dataFinal; data = data.AddDays(1))
        {
            flag++;

            eventos.Add(new EventoDia()
                {
                    ValorData = data.ToString("dd"),
                    NomeDia = data.ToString("dddd")
                });

            if (flag == 7)
            {
                semanaClsse = new Semana();
                semanaClsse.Dates = eventos;
                semana.Add(semanaClsse);

                eventos = new List<EventoDia>();
                flag = 0;
            }
            if (contarDias == totalDias)
            {
                semanaClsse = new Semana();
                semanaClsse.Dates = eventos;
                semana.Add(semanaClsse);
                break;
            }
            contarDias++;
        }
    }
    
    private void CloseModal()
    {
        displayModal = false;
    }

    private void OpenModal(int sIndice, int dIndice)
    {
        displayModal = true;
    }
}
